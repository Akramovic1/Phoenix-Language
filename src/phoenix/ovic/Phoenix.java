/* Generated By:JavaCC: Do not edit this line. Phoenix.java */
package phoenix.ovic;
import java.io.StringReader;
import java.util.Map;
import java.util.HashMap;

public class Phoenix implements PhoenixConstants {
  int i =0;
  int op1=0;
  int op2=0;
  int value =0;
  String operInner=null;
  String operOuter="+";
  int temp=0;
  HashMap<String,Integer> map = new HashMap<String,Integer>();
  String varName=null;
  boolean boolFlag;
  boolean notFlag;

  final public void start() throws ParseException {
    ComA();
    jj_consume_token(0);
  }

  final public void ComA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Var:
    case SKIPC:
    case IF:
    case WHILE:
      Com();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        Com();
      }
      break;
    case PLUS:
    case MINUS:
    case LBRACE:
    case Num:
      AExp();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Com() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SKIPC:
      jj_consume_token(SKIPC);
      break;
    case Var:
      varName = getVar();
                     temp=0;
      jj_consume_token(ASSIGN);
      AExp();
                                                 map.put(varName,temp); System.out.println(varName+":= " + map.get(varName));
      break;
    case IF:
      jj_consume_token(IF);
      BExpA();
      jj_consume_token(THEN);
      ComA();
      jj_consume_token(ELSE);
      ComA();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      BExpA();
      jj_consume_token(DO);
      ComA();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BExpA() throws ParseException {
 boolean t1=false,t2=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    BExp();
                        if(notFlag) boolFlag= !boolFlag; notFlag=false;t1=boolFlag;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
             t1=boolFlag;
      BExp();
                                   if(notFlag) boolFlag= !boolFlag; notFlag=false; t2=boolFlag; boolFlag= t1|t2;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }

  }

  final public void BExp() throws ParseException {
 int t1=0,t2=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case LBRACE:
    case Var:
    case Num:
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(LBRACE);
      }
      AExp();
             t1=value;
      jj_consume_token(EQUAL);
      AExp();
             t2=value;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RBRACE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(RBRACE);
      }
                   if(t1==t2) boolFlag=true; else boolFlag=false;
      break;
    case NOT:
      jj_consume_token(NOT);
           notFlag=true;
      BExpA();
      break;
    case FALSE:
      jj_consume_token(FALSE);
              boolFlag=false;
      break;
    case TRUE:
      jj_consume_token(TRUE);
             boolFlag=true;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void AExp() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(LBRACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                 operOuter="+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                           operOuter="-";
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    AExpB();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                                                               operOuter="+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                                                                         operOuter="-";
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AExpB();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(RBRACE);
    }
  }

  final public void AExpB() throws ParseException {
               value=0; op1=0; op2=0;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      jj_consume_token(LBRACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                operInner="+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                          operInner="-";
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      op1 = getInt();
              value += op1 ;
      break;
    case Var:
      op1 = getValOfVar();
                                                   value += op1 ;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                                                             operInner="+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                                                                       operInner="-";
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Num:
        op2 = getInt();
                                                                                                                                       if(operInner.contains("+")) value += op2 ; else value-=op2;
        break;
      case Var:
        op2 = getValOfVar();
                                                                                                                                                                                                                        if(operInner.contains("+")) value += op2 ; else value-=op2;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      jj_consume_token(RBRACE);
    }
  if(operOuter.contains("+")) temp+=value; else temp-=value;
  if(operInner!=null)
   System.out.println("Calculation  "+op1+" "+operInner+" "+op2+" =  " + value);
  }

  final public int getInt() throws ParseException, NumberFormatException {
 Token t ;
    t = jj_consume_token(Num);
  {if (true) return Integer.parseInt( t.image ) ;}
    throw new Error("Missing return statement in function");
  }

  final public String getVar() throws ParseException {
 Token t ;
    t = jj_consume_token(Var);
  {if (true) return t.image ;}
    throw new Error("Missing return statement in function");
  }

  final public int getValOfVar() throws ParseException {
 Token t ;  String var;
    t = jj_consume_token(Var);
  var = t.image ;
  if(map.containsKey(var)) {if (true) return map.get(var);} else System.out.println(var +" is undefined. We will consider it zero"); {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PhoenixTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x4cd1800,0x4c40000,0x10000,0x100000,0x20000,0x10000,0x20000,0x2d1b00,0x10000,0x1800,0x1800,0x1800,0x1800,0x20000,0x10000,0x1800,0x1800,0xc0000,0x1800,0x1800,0xc0000,0x20000,};
   }

  /** Constructor with InputStream. */
  public Phoenix(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Phoenix(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PhoenixTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Phoenix(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PhoenixTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Phoenix(PhoenixTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PhoenixTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  //a:=((1-3)-(2+5)+8)
  //a:=3;b:=3;c:=4;if (!(a==b)^!(c==4)) then skip else skip
  // main method is in a separate file
}
